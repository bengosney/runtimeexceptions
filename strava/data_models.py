# generated by datamodel-codegen:
#   filename:  openapi.json
#   timestamp: 2025-07-20T20:06:01+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Dict, List, Optional

from pydantic import BaseModel, Field, RootModel


class ActivityTotal(BaseModel):
    count: int | None = Field(None, description='The number of activities considered in this total.')
    distance: float | None = Field(None, description='The total distance covered by the considered activities.')
    moving_time: int | None = Field(None, description='The total moving time of the considered activities.')
    elapsed_time: int | None = Field(None, description='The total elapsed time of the considered activities.')
    elevation_gain: float | None = Field(None, description='The total elevation gain of the considered activities.')
    achievement_count: int | None = Field(
        None, description='The total number of achievements of the considered activities.'
    )


class Error(BaseModel):
    code: str | None = Field(None, description='The code associated with this error.')
    field: str | None = Field(
        None, description='The specific field or aspect of the resource associated with this error.'
    )
    resource: str | None = Field(None, description='The type of resource associated with this error.')


class MeasurementPreference(Enum):
    feet = 'feet'
    meters = 'meters'


class Sex(Enum):
    M = 'M'
    F = 'F'


class MetaAthlete(BaseModel):
    id: int | None = Field(None, description='The unique identifier of the athlete')


class SportType(Enum):
    cycling = 'cycling'
    running = 'running'
    triathlon = 'triathlon'
    other = 'other'


class MetaClub(BaseModel):
    id: int | None = Field(None, description="The club's unique identifier.")
    resource_state: int | None = Field(
        None,
        description='Resource state, indicates level of detail. Possible values: 1 -> "meta", 2 -> "summary", 3 -> "detail"',
    )
    name: str | None = Field(None, description="The club's name.")


class ActivityType(Enum):
    AlpineSki = 'AlpineSki'
    BackcountrySki = 'BackcountrySki'
    Canoeing = 'Canoeing'
    Crossfit = 'Crossfit'
    EBikeRide = 'EBikeRide'
    Elliptical = 'Elliptical'
    Golf = 'Golf'
    Handcycle = 'Handcycle'
    Hike = 'Hike'
    IceSkate = 'IceSkate'
    InlineSkate = 'InlineSkate'
    Kayaking = 'Kayaking'
    Kitesurf = 'Kitesurf'
    NordicSki = 'NordicSki'
    Ride = 'Ride'
    RockClimbing = 'RockClimbing'
    RollerSki = 'RollerSki'
    Rowing = 'Rowing'
    Run = 'Run'
    Sail = 'Sail'
    Skateboard = 'Skateboard'
    Snowboard = 'Snowboard'
    Snowshoe = 'Snowshoe'
    Soccer = 'Soccer'
    StairStepper = 'StairStepper'
    StandUpPaddling = 'StandUpPaddling'
    Surfing = 'Surfing'
    Swim = 'Swim'
    Velomobile = 'Velomobile'
    VirtualRide = 'VirtualRide'
    VirtualRun = 'VirtualRun'
    Walk = 'Walk'
    WeightTraining = 'WeightTraining'
    Wheelchair = 'Wheelchair'
    Windsurf = 'Windsurf'
    Workout = 'Workout'
    Yoga = 'Yoga'


class SummaryGear(BaseModel):
    id: str | None = Field(None, description="The gear's unique identifier.")
    resource_state: int | None = Field(
        None, description='Resource state, indicates level of detail. Possible values: 2 -> "summary", 3 -> "detail"'
    )
    primary: bool | None = Field(None, description="Whether this gear's is the owner's default one.")
    name: str | None = Field(None, description="The gear's name.")
    distance: float | None = Field(None, description='The distance logged with this gear.')


class ZoneRange(BaseModel):
    min: int | None = Field(None, description='The minimum value in the range.')
    max: int | None = Field(None, description='The maximum value in the range.')


class ActivityType1(Enum):
    Ride = 'Ride'
    Run = 'Run'


class LatLng(RootModel[list[float]]):
    root: list[float] = Field(
        ...,
        description='A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.',
        max_length=2,
        min_length=2,
    )


class SummaryPRSegmentEffort(BaseModel):
    pr_activity_id: int | None = Field(
        None, description='The unique identifier of the activity related to the PR effort.'
    )
    pr_elapsed_time: int | None = Field(None, description='The elapsed time ot the PR effort.')
    pr_date: datetime | None = Field(None, description='The time at which the PR effort was started.')
    effort_count: int | None = Field(
        None, description='Number of efforts by the authenticated athlete on this segment.'
    )


class SummarySegmentEffort(BaseModel):
    id: int | None = Field(None, description='The unique identifier of this effort')
    activity_id: int | None = Field(None, description='The unique identifier of the activity related to this effort')
    elapsed_time: int | None = Field(None, description="The effort's elapsed time")
    start_date: datetime | None = Field(None, description='The time at which the effort was started.')
    start_date_local: datetime | None = Field(
        None, description='The time at which the effort was started in the local timezone.'
    )
    distance: float | None = Field(None, description="The effort's distance in meters")
    is_kom: bool | None = Field(None, description='Whether this effort is the current best on the leaderboard')


class PolylineMap(BaseModel):
    id: str | None = Field(None, description='The identifier of the map')
    polyline: str | None = Field(
        None, description='The polyline of the map, only returned on detailed representation of an object'
    )
    summary_polyline: str | None = Field(None, description='The summary polyline of the map')


class MetaActivity(BaseModel):
    id: int | None = Field(None, description='The unique identifier of the activity')


class ClimbCategoryDesc(Enum):
    NC = 'NC'
    field_4 = '4'
    field_3 = '3'
    field_2 = '2'
    field_1 = '1'
    HC = 'HC'


class ExplorerSegment(BaseModel):
    id: int | None = Field(None, description='The unique identifier of this segment')
    name: str | None = Field(None, description='The name of this segment')
    climb_category: int | None = Field(
        None,
        description='The category of the climb [0, 5]. Higher is harder ie. 5 is Hors cat√©gorie, 0 is uncategorized in climb_category. If climb_category = 5, climb_category_desc = HC. If climb_category = 2, climb_category_desc = 3.',
        ge=0,
        le=5,
    )
    climb_category_desc: ClimbCategoryDesc | None = Field(
        None, description='The description for the category of the climb'
    )
    avg_grade: float | None = Field(None, description="The segment's average grade, in percents")
    start_latlng: LatLng | None = None
    end_latlng: LatLng | None = None
    elev_difference: float | None = Field(None, description="The segments's evelation difference, in meters")
    distance: float | None = Field(None, description="The segment's distance, in meters")
    points: str | None = Field(None, description='The polyline of the segment')


class SportTypeModel(Enum):
    AlpineSki = 'AlpineSki'
    BackcountrySki = 'BackcountrySki'
    Badminton = 'Badminton'
    Canoeing = 'Canoeing'
    Crossfit = 'Crossfit'
    EBikeRide = 'EBikeRide'
    Elliptical = 'Elliptical'
    EMountainBikeRide = 'EMountainBikeRide'
    Golf = 'Golf'
    GravelRide = 'GravelRide'
    Handcycle = 'Handcycle'
    HighIntensityIntervalTraining = 'HighIntensityIntervalTraining'
    Hike = 'Hike'
    IceSkate = 'IceSkate'
    InlineSkate = 'InlineSkate'
    Kayaking = 'Kayaking'
    Kitesurf = 'Kitesurf'
    MountainBikeRide = 'MountainBikeRide'
    NordicSki = 'NordicSki'
    Pickleball = 'Pickleball'
    Pilates = 'Pilates'
    Racquetball = 'Racquetball'
    Ride = 'Ride'
    RockClimbing = 'RockClimbing'
    RollerSki = 'RollerSki'
    Rowing = 'Rowing'
    Run = 'Run'
    Sail = 'Sail'
    Skateboard = 'Skateboard'
    Snowboard = 'Snowboard'
    Snowshoe = 'Snowshoe'
    Soccer = 'Soccer'
    Squash = 'Squash'
    StairStepper = 'StairStepper'
    StandUpPaddling = 'StandUpPaddling'
    Surfing = 'Surfing'
    Swim = 'Swim'
    TableTennis = 'TableTennis'
    Tennis = 'Tennis'
    TrailRun = 'TrailRun'
    Velomobile = 'Velomobile'
    VirtualRide = 'VirtualRide'
    VirtualRow = 'VirtualRow'
    VirtualRun = 'VirtualRun'
    Walk = 'Walk'
    WeightTraining = 'WeightTraining'
    Wheelchair = 'Wheelchair'
    Windsurf = 'Windsurf'
    Workout = 'Workout'
    Yoga = 'Yoga'


class Primary(BaseModel):
    id: int | None = None
    source: int | None = None
    unique_id: str | None = None
    urls: dict[str, str] | None = None


class PhotosSummary(BaseModel):
    count: int | None = Field(None, description='The number of photos')
    primary: Primary | None = None


class Split(BaseModel):
    average_speed: float | None = Field(None, description='The average speed of this split, in meters per second')
    distance: float | None = Field(None, description='The distance of this split, in meters')
    elapsed_time: int | None = Field(None, description='The elapsed time of this split, in seconds')
    elevation_difference: float | None = Field(None, description='The elevation difference of this split, in meters')
    pace_zone: int | None = Field(None, description='The pacing zone of this split')
    moving_time: int | None = Field(None, description='The moving time of this split, in seconds')
    split: int | None = Field(None, description='N/A')


class Lap(BaseModel):
    id: int | None = Field(None, description='The unique identifier of this lap')
    activity: MetaActivity | None = None
    athlete: MetaAthlete | None = None
    average_cadence: float | None = Field(None, description="The lap's average cadence")
    average_speed: float | None = Field(None, description="The lap's average speed")
    distance: float | None = Field(None, description="The lap's distance, in meters")
    elapsed_time: int | None = Field(None, description="The lap's elapsed time, in seconds")
    start_index: int | None = Field(None, description="The start index of this effort in its activity's stream")
    end_index: int | None = Field(None, description="The end index of this effort in its activity's stream")
    lap_index: int | None = Field(None, description='The index of this lap in the activity it belongs to')
    max_speed: float | None = Field(None, description='The maximum speed of this lat, in meters per second')
    moving_time: int | None = Field(None, description="The lap's moving time, in seconds")
    name: str | None = Field(None, description='The name of the lap')
    pace_zone: int | None = Field(None, description="The athlete's pace zone during this lap")
    split: int | None = None
    start_date: datetime | None = Field(None, description='The time at which the lap was started.')
    start_date_local: datetime | None = Field(
        None, description='The time at which the lap was started in the local timezone.'
    )
    total_elevation_gain: float | None = Field(None, description='The elevation gain of this lap, in meters')


class UpdatableActivity(BaseModel):
    commute: bool | None = Field(None, description='Whether this activity is a commute')
    trainer: bool | None = Field(None, description='Whether this activity was recorded on a training machine')
    hide_from_home: bool | None = Field(None, description='Whether this activity is muted')
    description: str | None = Field(None, description='The description of the activity')
    name: str | None = Field(None, description='The name of the activity')
    type: ActivityType | None = None
    sport_type: SportTypeModel | None = None
    gear_id: str | None = Field(
        None, description='Identifier for the gear associated with the activity. ‚Äònone‚Äô clears gear from activity'
    )


class Type(Enum):
    heartrate = 'heartrate'
    power = 'power'


class TimedZoneRange(ZoneRange):
    time: int | None = Field(None, description='The number of seconds spent in this zone')


class Membership(Enum):
    member = 'member'
    pending = 'pending'


class ClubAthlete(BaseModel):
    resource_state: int | None = Field(
        None,
        description='Resource state, indicates level of detail. Possible values: 1 -> "meta", 2 -> "summary", 3 -> "detail"',
    )
    firstname: str | None = Field(None, description="The athlete's first name.")
    lastname: str | None = Field(None, description="The athlete's last initial.")
    member: str | None = Field(None, description="The athlete's member status.")
    admin: bool | None = Field(None, description='Whether the athlete is a club admin.')
    owner: bool | None = Field(None, description='Whether the athlete is club owner.')


class ClubActivity(BaseModel):
    athlete: MetaAthlete | None = None
    name: str | None = Field(None, description='The name of the activity')
    distance: float | None = Field(None, description="The activity's distance, in meters")
    moving_time: int | None = Field(None, description="The activity's moving time, in seconds")
    elapsed_time: int | None = Field(None, description="The activity's elapsed time, in seconds")
    total_elevation_gain: float | None = Field(None, description="The activity's total elevation gain.")
    type: ActivityType | None = None
    sport_type: SportTypeModel | None = None
    workout_type: int | None = Field(None, description="The activity's workout type")


class DetailedGear(SummaryGear):
    brand_name: str | None = Field(None, description="The gear's brand name.")
    model_name: str | None = Field(None, description="The gear's model name.")
    frame_type: int | None = Field(None, description="The gear's frame type (bike only).")
    description: str | None = Field(None, description="The gear's description.")


class Waypoint(BaseModel):
    latlng: LatLng | None = None
    target_latlng: LatLng | None = None
    categories: list[str] | None = Field(None, description='Categories that the waypoint belongs to', min_length=0)
    title: str | None = Field(None, description='A title for the waypoint')
    description: str | None = Field(None, description='A description of the waypoint (optional)')
    distance_into_route: int | None = Field(
        None, description='The number meters along the route that the waypoint is located'
    )


class Upload(BaseModel):
    id: int | None = Field(None, description='The unique identifier of the upload')
    id_str: str | None = Field(None, description='The unique identifier of the upload in string format')
    external_id: str | None = Field(None, description='The external identifier of the upload')
    error: str | None = Field(None, description='The error associated with this upload')
    status: str | None = Field(None, description='The status of this upload')
    activity_id: int | None = Field(None, description='The identifier of the activity this upload resulted into')


class Resolution(Enum):
    low = 'low'
    medium = 'medium'
    high = 'high'


class SeriesType(Enum):
    distance = 'distance'
    time = 'time'


class BaseStream(BaseModel):
    original_size: int | None = Field(None, description='The number of data points in this stream')
    resolution: Resolution | None = Field(
        None, description='The level of detail (sampling) in which this stream was returned'
    )
    series_type: SeriesType | None = Field(
        None, description='The base series used in the case the stream was downsampled'
    )


class DistanceStream(BaseStream):
    data: list[float] | None = Field(None, description='The sequence of distance values for this stream, in meters')


class LatLngStream(BaseStream):
    data: list[LatLng] | None = Field(None, description='The sequence of lat/long values for this stream')


class AltitudeStream(BaseStream):
    data: list[float] | None = Field(None, description='The sequence of altitude values for this stream, in meters')


class SmoothVelocityStream(BaseStream):
    data: list[float] | None = Field(
        None, description='The sequence of velocity values for this stream, in meters per second'
    )


class HeartrateStream(BaseStream):
    data: list[int] | None = Field(
        None, description='The sequence of heart rate values for this stream, in beats per minute'
    )


class CadenceStream(BaseStream):
    data: list[int] | None = Field(
        None, description='The sequence of cadence values for this stream, in rotations per minute'
    )


class PowerStream(BaseStream):
    data: list[int] | None = Field(None, description='The sequence of power values for this stream, in watts')


class TemperatureStream(BaseStream):
    data: list[int] | None = Field(
        None, description='The sequence of temperature values for this stream, in celsius degrees'
    )


class MovingStream(BaseStream):
    data: list[bool] | None = Field(
        None, description='The sequence of moving values for this stream, as boolean values'
    )


class SmoothGradeStream(BaseStream):
    data: list[float] | None = Field(
        None, description='The sequence of grade values for this stream, as percents of a grade'
    )


class ActivityStats(BaseModel):
    biggest_ride_distance: float | None = Field(None, description='The longest distance ridden by the athlete.')
    biggest_climb_elevation_gain: float | None = Field(None, description='The highest climb ridden by the athlete.')
    recent_ride_totals: ActivityTotal | None = None
    recent_run_totals: ActivityTotal | None = None
    recent_swim_totals: ActivityTotal | None = None
    ytd_ride_totals: ActivityTotal | None = None
    ytd_run_totals: ActivityTotal | None = None
    ytd_swim_totals: ActivityTotal | None = None
    all_ride_totals: ActivityTotal | None = None
    all_run_totals: ActivityTotal | None = None
    all_swim_totals: ActivityTotal | None = None


class Fault(BaseModel):
    errors: list[Error] | None = Field(
        None, description='The set of specific errors associated with this fault, if any.'
    )
    message: str | None = Field(None, description='The message of the fault.')


class SummaryAthlete(MetaAthlete):
    resource_state: int | None = Field(
        None,
        description='Resource state, indicates level of detail. Possible values: 1 -> "meta", 2 -> "summary", 3 -> "detail"',
    )
    firstname: str | None = Field(None, description="The athlete's first name.")
    lastname: str | None = Field(None, description="The athlete's last name.")
    profile_medium: str | None = Field(None, description='URL to a 62x62 pixel profile picture.')
    profile: str | None = Field(None, description='URL to a 124x124 pixel profile picture.')
    city: str | None = Field(None, description="The athlete's city.")
    state: str | None = Field(None, description="The athlete's state or geographical region.")
    country: str | None = Field(None, description="The athlete's country.")
    sex: Sex | None = Field(None, description="The athlete's sex.")
    premium: bool | None = Field(
        None, description='Deprecated.  Use summit field instead. Whether the athlete has any Summit subscription.'
    )
    summit: bool | None = Field(None, description='Whether the athlete has any Summit subscription.')
    created_at: datetime | None = Field(None, description='The time at which the athlete was created.')
    updated_at: datetime | None = Field(None, description='The time at which the athlete was last updated.')


class SummaryClub(MetaClub):
    profile_medium: str | None = Field(None, description='URL to a 60x60 pixel profile picture.')
    cover_photo: str | None = Field(None, description='URL to a ~1185x580 pixel cover photo.')
    cover_photo_small: str | None = Field(None, description='URL to a ~360x176  pixel cover photo.')
    sport_type: SportType | None = Field(None, description='Deprecated. Prefer to use activity_types.')
    activity_types: list[ActivityType] | None = Field(
        None, description='The activity types that count for a club. This takes precedence over sport_type.'
    )
    city: str | None = Field(None, description="The club's city.")
    state: str | None = Field(None, description="The club's state or geographical region.")
    country: str | None = Field(None, description="The club's country.")
    private: bool | None = Field(None, description='Whether the club is private.')
    member_count: int | None = Field(None, description="The club's member count.")
    featured: bool | None = Field(None, description='Whether the club is featured or not.')
    verified: bool | None = Field(None, description='Whether the club is verified or not.')
    url: str | None = Field(None, description="The club's vanity URL.")


class ZoneRanges(RootModel[list[ZoneRange]]):
    root: list[ZoneRange]


class PowerZoneRanges(BaseModel):
    zones: ZoneRanges | None = None


class SummarySegment(BaseModel):
    id: int | None = Field(None, description='The unique identifier of this segment')
    name: str | None = Field(None, description='The name of this segment')
    activity_type: ActivityType1 | None = None
    distance: float | None = Field(None, description="The segment's distance, in meters")
    average_grade: float | None = Field(None, description="The segment's average grade, in percents")
    maximum_grade: float | None = Field(None, description="The segments's maximum grade, in percents")
    elevation_high: float | None = Field(None, description="The segments's highest elevation, in meters")
    elevation_low: float | None = Field(None, description="The segments's lowest elevation, in meters")
    start_latlng: LatLng | None = None
    end_latlng: LatLng | None = None
    climb_category: int | None = Field(
        None,
        description='The category of the climb [0, 5]. Higher is harder ie. 5 is Hors cat√©gorie, 0 is uncategorized in climb_category.',
    )
    city: str | None = Field(None, description="The segments's city.")
    state: str | None = Field(None, description="The segments's state or geographical region.")
    country: str | None = Field(None, description="The segment's country.")
    private: bool | None = Field(None, description='Whether this segment is private.')
    athlete_pr_effort: SummaryPRSegmentEffort | None = None
    athlete_segment_stats: SummarySegmentEffort | None = None


class DetailedSegmentEffort(SummarySegmentEffort):
    name: str | None = Field(None, description='The name of the segment on which this effort was performed')
    activity: MetaActivity | None = None
    athlete: MetaAthlete | None = None
    moving_time: int | None = Field(None, description="The effort's moving time")
    start_index: int | None = Field(None, description="The start index of this effort in its activity's stream")
    end_index: int | None = Field(None, description="The end index of this effort in its activity's stream")
    average_cadence: float | None = Field(None, description="The effort's average cadence")
    average_watts: float | None = Field(None, description='The average wattage of this effort')
    device_watts: bool | None = Field(
        None, description='For riding efforts, whether the wattage was reported by a dedicated recording device'
    )
    average_heartrate: float | None = Field(
        None, description='The heart heart rate of the athlete during this effort'
    )
    max_heartrate: float | None = Field(None, description='The maximum heart rate of the athlete during this effort')
    segment: SummarySegment | None = None
    kom_rank: int | None = Field(
        None,
        description='The rank of the effort on the global leaderboard if it belongs in the top 10 at the time of upload',
        ge=1,
        le=10,
    )
    pr_rank: int | None = Field(
        None,
        description="The rank of the effort on the athlete's leaderboard if it belongs in the top 3 at the time of upload",
        ge=1,
        le=3,
    )
    hidden: bool | None = Field(
        None, description='Whether this effort should be hidden when viewed within an activity'
    )


class ExplorerResponse(BaseModel):
    segments: list[ExplorerSegment] | None = Field(
        None, description='The set of segments matching an explorer request'
    )


class SummaryActivity(MetaActivity):
    external_id: str | None = Field(None, description='The identifier provided at upload time')
    upload_id: int | None = Field(None, description='The identifier of the upload that resulted in this activity')
    athlete: MetaAthlete | None = None
    name: str | None = Field(None, description='The name of the activity')
    distance: float | None = Field(None, description="The activity's distance, in meters")
    moving_time: int | None = Field(None, description="The activity's moving time, in seconds")
    elapsed_time: int | None = Field(None, description="The activity's elapsed time, in seconds")
    total_elevation_gain: float | None = Field(None, description="The activity's total elevation gain.")
    elev_high: float | None = Field(None, description="The activity's highest elevation, in meters")
    elev_low: float | None = Field(None, description="The activity's lowest elevation, in meters")
    type: ActivityType | None = None
    sport_type: SportTypeModel | None = None
    start_date: datetime | None = Field(None, description='The time at which the activity was started.')
    start_date_local: datetime | None = Field(
        None, description='The time at which the activity was started in the local timezone.'
    )
    timezone: str | None = Field(None, description='The timezone of the activity')
    start_latlng: LatLng | None = None
    end_latlng: LatLng | None = None
    achievement_count: int | None = Field(None, description='The number of achievements gained during this activity')
    kudos_count: int | None = Field(None, description='The number of kudos given for this activity')
    comment_count: int | None = Field(None, description='The number of comments for this activity')
    athlete_count: int | None = Field(
        None, description='The number of athletes for taking part in a group activity', ge=1
    )
    photo_count: int | None = Field(None, description='The number of Instagram photos for this activity')
    total_photo_count: int | None = Field(
        None, description='The number of Instagram and Strava photos for this activity'
    )
    map: PolylineMap | None = None
    trainer: bool | None = Field(None, description='Whether this activity was recorded on a training machine')
    commute: bool | None = Field(None, description='Whether this activity is a commute')
    manual: bool | None = Field(None, description='Whether this activity was created manually')
    private: bool | None = Field(None, description='Whether this activity is private')
    flagged: bool | None = Field(None, description='Whether this activity is flagged')
    workout_type: int | None = Field(None, description="The activity's workout type")
    upload_id_str: str | None = Field(None, description='The unique identifier of the upload in string format')
    average_speed: float | None = Field(None, description="The activity's average speed, in meters per second")
    max_speed: float | None = Field(None, description="The activity's max speed, in meters per second")
    has_kudoed: bool | None = Field(None, description='Whether the logged-in athlete has kudoed this activity')
    hide_from_home: bool | None = Field(None, description='Whether the activity is muted')
    gear_id: str | None = Field(None, description='The id of the gear for the activity')
    kilojoules: float | None = Field(
        None, description='The total work done in kilojoules during this activity. Rides only'
    )
    average_watts: float | None = Field(
        None, description='Average power output in watts during this activity. Rides only'
    )
    device_watts: bool | None = Field(
        None, description='Whether the watts are from a power meter, false if estimated'
    )
    max_watts: int | None = Field(None, description='Rides with power meter data only')
    weighted_average_watts: int | None = Field(
        None, description='Similar to Normalized Power. Rides with power meter data only'
    )


class TimedZoneDistribution(RootModel[list[TimedZoneRange]]):
    root: list[TimedZoneRange] = Field(
        ..., description='Stores the exclusive ranges representing zones and the time spent in each.'
    )


class Comment(BaseModel):
    id: int | None = Field(None, description='The unique identifier of this comment')
    activity_id: int | None = Field(None, description='The identifier of the activity this comment is related to')
    text: str | None = Field(None, description='The content of the comment')
    athlete: SummaryAthlete | None = None
    created_at: datetime | None = Field(None, description='The time at which this comment was created.')


class DetailedClub(SummaryClub):
    membership: Membership | None = Field(None, description='The membership status of the logged-in athlete.')
    admin: bool | None = Field(
        None, description='Whether the currently logged-in athlete is an administrator of this club.'
    )
    owner: bool | None = Field(
        None, description='Whether the currently logged-in athlete is the owner of this club.'
    )
    following_count: int | None = Field(
        None, description='The number of athletes in the club that the logged-in athlete follows.'
    )


class Route(BaseModel):
    athlete: SummaryAthlete | None = None
    description: str | None = Field(None, description='The description of the route')
    distance: float | None = Field(None, description="The route's distance, in meters")
    elevation_gain: float | None = Field(None, description="The route's elevation gain.")
    id: int | None = Field(None, description='The unique identifier of this route')
    id_str: str | None = Field(None, description='The unique identifier of the route in string format')
    map: PolylineMap | None = None
    name: str | None = Field(None, description='The name of this route')
    private: bool | None = Field(None, description='Whether this route is private')
    starred: bool | None = Field(None, description='Whether this route is starred by the logged-in athlete')
    timestamp: int | None = Field(None, description='An epoch timestamp of when the route was created')
    type: int | None = Field(None, description="This route's type (1 for ride, 2 for runs)")
    sub_type: int | None = Field(
        None,
        description="This route's sub-type (1 for road, 2 for mountain bike, 3 for cross, 4 for trail, 5 for mixed)",
    )
    created_at: datetime | None = Field(None, description='The time at which the route was created')
    updated_at: datetime | None = Field(None, description='The time at which the route was last updated')
    estimated_moving_time: int | None = Field(
        None, description='Estimated time in seconds for the authenticated athlete to complete route'
    )
    segments: list[SummarySegment] | None = Field(None, description='The segments traversed by this route')
    waypoints: list[Waypoint] | None = Field(None, description='The custom waypoints along this route', min_length=0)


class TimeStream(BaseStream):
    data: list[int] | None = Field(None, description='The sequence of time values for this stream, in seconds')


class DetailedAthlete(SummaryAthlete):
    follower_count: int | None = Field(None, description="The athlete's follower count.")
    friend_count: int | None = Field(None, description="The athlete's friend count.")
    measurement_preference: MeasurementPreference | None = Field(
        None, description="The athlete's preferred unit system."
    )
    ftp: int | None = Field(None, description="The athlete's FTP (Functional Threshold Power).")
    weight: float | None = Field(None, description="The athlete's weight.")
    clubs: list[SummaryClub] | None = Field(None, description="The athlete's clubs.")
    bikes: list[SummaryGear] | None = Field(None, description="The athlete's bikes.")
    shoes: list[SummaryGear] | None = Field(None, description="The athlete's shoes.")


class HeartRateZoneRanges(BaseModel):
    custom_zones: bool | None = Field(
        None, description='Whether the athlete has set their own custom heart rate zones'
    )
    zones: ZoneRanges | None = None


class DetailedSegment(SummarySegment):
    created_at: datetime | None = Field(None, description='The time at which the segment was created.')
    updated_at: datetime | None = Field(None, description='The time at which the segment was last updated.')
    total_elevation_gain: float | None = Field(None, description="The segment's total elevation gain.")
    map: PolylineMap | None = None
    effort_count: int | None = Field(None, description='The total number of efforts for this segment')
    athlete_count: int | None = Field(
        None, description='The number of unique athletes who have an effort for this segment'
    )
    hazardous: bool | None = Field(None, description='Whether this segment is considered hazardous')
    star_count: int | None = Field(None, description='The number of stars for this segment')


class DetailedActivity(SummaryActivity):
    description: str | None = Field(None, description='The description of the activity')
    photos: PhotosSummary | None = None
    gear: SummaryGear | None = None
    calories: float | None = Field(None, description='The number of kilocalories consumed during this activity')
    segment_efforts: list[DetailedSegmentEffort] | None = None
    device_name: str | None = Field(None, description='The name of the device used to record the activity')
    embed_token: str | None = Field(None, description='The token used to embed a Strava activity')
    splits_metric: list[Split] | None = Field(
        None, description='The splits of this activity in metric units (for runs)'
    )
    splits_standard: list[Split] | None = Field(
        None, description='The splits of this activity in imperial units (for runs)'
    )
    laps: list[Lap] | None = None
    best_efforts: list[DetailedSegmentEffort] | None = None


class ActivityZone(BaseModel):
    score: int | None = None
    distribution_buckets: TimedZoneDistribution | None = None
    type: Type | None = None
    sensor_based: bool | None = None
    points: int | None = None
    custom_zones: bool | None = None
    max: int | None = None


class StreamSet(BaseModel):
    time: TimeStream | None = None
    distance: DistanceStream | None = None
    latlng: LatLngStream | None = None
    altitude: AltitudeStream | None = None
    velocity_smooth: SmoothVelocityStream | None = None
    heartrate: HeartrateStream | None = None
    cadence: CadenceStream | None = None
    watts: PowerStream | None = None
    temp: TemperatureStream | None = None
    moving: MovingStream | None = None
    grade_smooth: SmoothGradeStream | None = None


class Zones(BaseModel):
    heart_rate: HeartRateZoneRanges | None = None
    power: PowerZoneRanges | None = None
